    // n-> sizeof array(arr)
    

    // Making segment tree
    while(__builtin_popcount(n)!=1){
        arr.push_back(0);
    }
    vector<ll> tree;

    tree.resize(2*n);
    for(ll i=0;i<n;i++){
        tree[i+n]=arr[i];
    }

    for(ll i=n-1;i>=1;i--){
        tree[i]=tree[2*i]+tree[2*i+1];  
    }


    //Traversing in tree

    ll solve( node, node_low, node_high, query_low, query_high){

        if(query_low<=node_low && query_high>=node_high){
            return tree[node];
        }
        if(query_low<node_low || queery_high>node_high){
            return 0;
        }

        ll last_in_left=(node_low+node_high)/2;
        return solve(2*node,node_low,last_in_left,query_low,query_high)+
                solve(2*node+1,last_in_left+1,node_high,query_low, query_high);

    }
