https://www.spoj.com/problems/NAKANJ/


#include<bits/stdc++.h>
#include<string>
#include<math.h>
#include<string.h>
#include<sstream>
#include<iostream>
#include<vector>
using namespace std;
typedef long long int ll;
#define MOD 1000000007;
const int N =1e5+10;
vector<int> g[N];
int vis[8][8];
int lev[8][8];

int getX(string s)
{
    return s[0]-'a';
}
int getY(string s)
{
    return s[1]-'1';
}

void reset()
{
    for(int i=0;i<8;i++)
    {
        for(int j=0;j<8;j++)
        {
            lev[i][j]=0;
            vis[i][j]=0;
        }
    }

}

bool isvalid(int x,int y)
{
    return (x>=0 && x<8 && y>=0 && y<8);
}

vector<pair<int,int>> movements = {
    {-1,2},{1,2},
    {-1,-2},{1,-2},
    {2,1},{2,-1},
    {-2,1},{-2,-1}
};

int bfs(string source, string dest)
{
    int sourceX=getX(source);
    int sourceY=getY(source);
    int destX=getX(dest);
    int destY=getY(dest);

    queue<pair<int,int>> q;
    q.push({sourceX,sourceY});
    vis[sourceX][sourceY]=1;
    while(!q.empty())
    {
        pair<int,int> v=q.front();
        int x=v.first,y=v.second;
        q.pop();
        for(auto movement : movements)
        {
            int childX = movement.first+x;
            int childY=movement.second+y;
            if(!isvalid(childX,childY))
            {
                continue;
            }
            if(!vis[childX][childY])
            {
                q.push({childX,childY});
                lev[childX][childY]=lev[x][y]+1;
                vis[childX][childY]=1;
            }
        }
    }

    return lev[destX][destY];

}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int n;
    cin>>n;
    
    while(n--)
    {
        reset();
        string s1, s2;
        cin>>s1>>s2;
        cout<<bfs(s1,s2)<<endl;
    }

    return 0;
}
