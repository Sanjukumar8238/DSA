// Using DFS

void dfs(int node,vector<int> g[],vector<bool> &vis, vector<int> &ans){
    
    vis[node]=true;
    for(int child : g[node]){
        if(!vis[child]){
            dfs(child,g,vis,ans);
        }
    }
    ans.push_back(node);
    
}


// Using BFS (Kahn's Algorithm)

vector<int> indegree(v); 
    queue<int> q;
    for(int i=0;i<v;i++){
        if(t[i].size()==0){
            q.push(i);
        }
        indegree[i]=t[i].size();
    }
    vector<int> ans;
    while(q.size()){
        int front=q.front();
        q.pop();
        ans.push_back(front);
        
        for(auto i : g[front]){
            indegree[i]--;
            if(indegree[i]==0){
                q.push(i);
            }
        }
        
    }
