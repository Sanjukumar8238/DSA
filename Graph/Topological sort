Problem link : https://leetcode.com/problems/course-schedule-ii/

class Solution {
public:
    int flag=0;
    void dfs(int v, vector<int> &color, vector<int> g[], stack<int> &s){
        
        color[v]=-1;
        
        for(auto u : g[v]){
            
            if(color[u]==-1){
                flag=-1;
                break;
            }
            
            if(color[u]==1)
                continue;
            
            dfs(u,color,g,s);
            
            
        }
        if(flag==-1)
            return;
        color[v]=1;
        s.push(v);
        
    }
    
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        
        int n=numCourses;
        vector<int> g[n];
        
        for(auto u : prerequisites){
            g[u[1]].push_back(u[0]);
        }
        
        vector<int> color(n,0);
        stack<int> s;
        for(int i=0;i<n;i++){
            if(color[i]==0)
                dfs(i,color,g,s);
        }
        vector<int> ans;
        if(flag==-1)
            return ans;
        
        
        while(s.size()){
            int temp=s.top();
            ans.push_back(temp);
            s.pop();
            
        }
        
        return ans;
    }
};
