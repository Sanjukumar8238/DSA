bool cmp(vector<int> &a, vector<int> &b){
    return a[2]<b[2];
}

//DSU
int findParent(vector<int> &parent, int node){
    if(parent[node]==node){
        return node;
    }
    return parent[node]=findParent(parent,parent[node]);
}

void setUnion(int a, int b,vector<int> &parent, vector<int> &rank){
    a=findParent(parent,a);
    b=findParent(parent,b);
    if(rank[a]<rank[b]){
        parent[a]=b;
    }
    else if(rank[a]>rank[b]){
        parent[b]=a;
    }
    else{
        parent[a]=b;
        rank[b]++;
    }
}

//Code
  vector<int> parent(n);
    vector<int> rank(n);
    for(int i=0;i<n;i++){
        parent[i]=i;
        rank[i]=0;
    }
    int ans=0;
    sort(edges.begin(),edges.end(),cmp);
    for(int i=0;i<edges.size();i++){
        int u=findParent(parent,edges[i][0]);
        int v=findParent(parent,edges[i][1]);
        int w=edges[i][2];
        
        if(u!=v){
            ans+=w;
            setUnion(u,v,parent,rank);
        }
    }
